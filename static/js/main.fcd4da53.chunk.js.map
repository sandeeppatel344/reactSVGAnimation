{"version":3,"sources":["components/SvgComponent.jsx","App.js","attachListner.js","serviceWorker.js","index.js"],"names":["Component","App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkToolPan","tool","state","setState","value","listner","e","console","log","currentTarget","id","elementConfig","forEach","ids","selectedCurrentElement","elementHandler","zoomVal","a","zoomLevel","alert","displayReadingByReactangle","TOOL_NONE","status","eventName","type","_this2","document","getElementById","addEventListener","SVGFile","target","getSVGDocument","appendChild","remove","setTimeout","idList","k","length","push","eventHandlerInfoArray","eventHandler","i","evInfo","el","attachEventListeners","_this3","react_default","createElement","react_svg_pan_zoom_min","height","window","innerHeight","preventPanOutside","width","innerWidth","style","border","ref","Viewer","onZoom","onChangeValue","onChangeTool","data","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcd4da53.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css';\n\nexport default class SvgComponent extends Component {\n\trender() {\n\t\treturn (\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"none\" x=\"0px\" y=\"0px\" width=\"1486px\" height=\"494px\" viewBox=\"0 0 1486 494\">\n</svg>\t\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport { ReactSVGPanZoom, TOOL_NONE, fitSelection, zoomOnViewerCenter, fitToViewer } from 'react-svg-pan-zoom';\nimport SvgComponent from './components/SvgComponent';\nimport attachEventListeners from './attachListner';\n\n\nclass App extends Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\ttool: TOOL_NONE,\n\t\t\tstatus: '',\n\t\t\tzoomVal:0,\n\t\t\tselectedCurrentElement:null,\n\t\t\telementConfig:[{\n\t\t\t\tid:\"infw_phase3-phase4_recycledWaterESR1_ReadingGroup\",\n\t\t\t\tzoomLevel:2,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_phase1-phase2_recycledWaterESR1_ReadingGroup\",\n\t\t\t\tzoomLevel:3,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t},{\n\t\t\t\tid:\"infw_phase3-phase4_recycledWaterESR1\",\n\t\t\t\tzoomLevel:2,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'Device'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_phase1-phase2_recycledWaterESR1\",\n\t\t\t\tzoomLevel:3,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'Device'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_aerator1\",\n\t\t\t\tzoomLevel:4,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_phase1_clarifier1_ReadingGroup\",\n\t\t\t\tzoomLevel:4,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_phase1_clarifier2_ReadingGroup\",\n\t\t\t\tzoomLevel:4,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_phase2_clarifier1_ReadingGroup\",\n\t\t\t\tzoomLevel:2,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_phase2_clarifier2_ReadingGroup\",\n\t\t\t\tzoomLevel:3,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_phase3_clarifier1_ReadingGroup\",\n\t\t\t\tzoomLevel:2,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid:\"infw_phase4_clarifier1_ReadingGroup\",\n\t\t\t\tzoomLevel:3,\n\t\t\t\teventName:'dblclick',\n\t\t\t\ttype:'readingGroup'\n\t\t\t}]\n\n\t\t\t//infw_phase2_clarifier2_ReadingGroup\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t// document.domain = 'http://localhost:7008'\n\t\t//\tthis.Viewer.fitToViewer(0,20);\n\t\tvar a = document.getElementById('getSVG');\n\t\ta.addEventListener(\n\t\t\t'load',\n\t\t\t(e) => {\n\t\t\t\tvar svgDoc = e.target.getSVGDocument();\n\n\t\t\t\tlet SVGFile = svgDoc.getElementById('Layer_1');\n\t\t\t\t\n\t\t\t\tvar gg = document.getElementById('addSvg');\n\t\t\t\tgg.appendChild(SVGFile);\n\t\t\t\tdocument.getElementById('removeElement').remove()//style.display = \"none\";\n\t\t\t\tthis.setState({ status: 'ok' });\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\t\tsetTimeout(() => {\n\t\t\t//var svgElement = document.getElementsByTagName('svg')\n\t\t\t//svgElement.setAttribute('viewBox',\"0 0 4000 4460\");\n\t\t\tvar idList = []\n\t\tfor (var k=0; k < this.state.elementConfig.length;k++) {\n\t\t\tif(this.state.elementConfig[k].type==\"Device\"){\n\t\t\t\tidList.push({ id: this.state.elementConfig[k].id, eventName: this.state.elementConfig[k].eventName });\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tattachEventListeners(idList, this.listner);\n\t\t}, 11000);\n\t\t//this.Viewer.setPointOnViewerCenter(50,300,1)\n\t\t\n\t}\n\ncheckToolPan=(tool)=>{\n\tif(this.state.tool==\"tools pan\"){\n\t\tthis.setState({value:null})\n\t}\n}\n\tlistner=(e)=>{\n\t\tconsole.log(\"Click\",e)\n\t\tconsole.log(\"iddd\",e.currentTarget.id)\n\t\tthis.state.elementConfig.forEach((ids)=>{\n\t\t\tif(e.currentTarget.id == ids.id){\n\t\t\t\t\tthis.setState({selectedCurrentElement:ids})\n\t\t\t}\n\t\t})\n\t\t\n\t}\n\telementHandler=(value)=>{\n\t\tthis.setState({zoomVal:value})\n\t\tconsole.log(\"val==\"+value.a)\n\t\tif(this.state.selectedCurrentElement&&(value.a > this.state.selectedCurrentElement.zoomLevel)){\n\t\t\talert(\"zoom limit exeded\")\n\n\t\t}\n\t\t\n\t}\n\n\tdisplayReadingByReactangle=()=>{\n\n\t}\n\n\t\n\n\trender() {\n\t\tconsole.log(\"tools\",this.state.tool)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ReactSVGPanZoom\n\t\t\t\t\theight={window.innerHeight}\n\t\t\t\t\tpreventPanOutside={false}\n\t\t\t\t\twidth={window.innerWidth-20}\n\t\t\t\t\tstyle={{ border: '1px solid black' }}\n\t\t\t\t\tref={(Viewer) => (this.Viewer = Viewer)}\n\t\t\t/*\t\t onClick={(event) => console.log('click1', event.currentTarget.id)}\n\t\t\t\t\t onDoubleClick={(event) => console.log('click1', event.currentTarget.id)}\n\t\t\t\t\tonMouseUp={(event) => console.log('up', event.x, event.y)}\n\t\t\t\t\tonMouseMove={(event) => console.log('move', event.x, event.y)}\n\t\t\t\t\tonMouseDown={(event) => console.log('down', event.x, event.y)} */\n\t\t\t\t\tonZoom={(value) => {\n\t\t\t\t\t\tconsole.log(value);\n\t\t\t\t\t\tthis.elementHandler(value)\n\t\t\t\t\t}}\n\t\t\t\t\tvalue={this.state.value}\n\t\t\t\t\tonChangeValue={(value) => this.setState({ value })}\n\t\t\t\t\ttool={this.state.tool}\n\t\t\t\t\tonChangeTool={(tool) => {this.setState({ tool })\n\t\t\t\t\t\n\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t \t<svg width={200} height={200} id=\"mainSVG\">\n\t\t\t\t\t\t<g id=\"addSvg\" />\n\t\t\t\t\t\t<foreignObject id=\"removeElement\">\n\t\t\t\t\t\t\t<object data=\"-test-New_Digram_7feb_ef.1.svgz\" id=\"getSVG\" type=\"image/svg+xml\" />\n\t\t\t\t\t\t</foreignObject>\n          </svg> \n\n\t\t\t\t</ReactSVGPanZoom>\n{/*           <object data=\"-test-New_Digram_7 feb_ef.svgz\" id=\"getSVG\" type=\"image/svg+xml\" />\n */}   \n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// attach event listeners to the svg elements\nexport default function attachEventListeners(eventHandlerInfoArray,eventHandler) {\n\n  for (let i = 0; i < eventHandlerInfoArray.length; i++) {\n    let evInfo = eventHandlerInfoArray[i];  // get id from the array\n    let el = document.getElementById(evInfo.id); //fetch the element by its id\n    if (el) {\n      // el.addEventListener(evInfo.eventName, evInfo.eventHandler); // add event to the element\n      el.addEventListener(evInfo.eventName, eventHandler);\n    }\n  }\n\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}